
real xMin=0;
real xMax=10;

real yMin=0;
real yMax=10;

real Rwell=0.1;
 

int n=51; /*number of elements along a boundary*/

int labelB=1;
int labelR=2;
int labelProd=3;
int labelT=4;
int labelL=5;

real beta=3.0;

border GammaB(t=0,1){

    x=xMin+(xMax-xMin)*t;

    y=yMin;

    label=labelB;
}

border GammaBB(t=0,1){

    x=xMin+(xMax-xMin)*(exp(beta*(t))-1)/(exp(beta)-1);

    y=yMin;

    label=labelB;

}

border GammaR(t=1,0){

    x=xMax;

    y=(yMax-Rwell)+(Rwell+yMin-yMax)*(exp(beta*(t))-1)/(exp(beta)-1);

    label=labelR;
}

border GammaProd(t=pi/2,0){

    x=-Rwell*cos(t)+xMax;
    y=-Rwell*sin(t)+yMax;
    label =labelProd;
}


border GammaT(t=0,1){

    x=(xMax-Rwell)+(-xMax-xMin+Rwell)*(exp(beta*t)-1)/(exp(beta)-1);

    y=yMax;

    label=labelT;
}

border GammaL(t=1,0){

    x=0;

    y=yMin+(yMax-yMin)*t;

    label=labelL;
}

border GammaLL(t=1,0){

    x=0;

    y=yMin+(yMax-yMin)*(exp(beta*t)-1)/(exp(beta)-1);

    label=labelL;
}

plot(GammaBB(n)+GammaR(n)+GammaProd(5)+GammaT(n)+GammaLL(n),dim=2,wait=1);
 
mesh Th=buildmesh(GammaBB(n)+GammaR(n)+GammaProd(5)+GammaT(n)+GammaLL(n));



func real Spl(real xx, real yy, real r)
{
    real h;
    if ((xx*xx+yy*yy)<=r*r)
        return 1-sqrt(xx^2+yy^2)/r;
    else
        return 0;
}


fespace Wh(Th,P1);

for (int i=3; i>1; i--)
{
    Wh MS;

   
    MS=Spl(x,y,i);

    //plot(MS, wait=1);

    mesh Th2=splitmesh(Th,1+i*MS);

    Th=Th2;
}

plot(Th);